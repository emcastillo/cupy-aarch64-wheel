name: "Build Wheels"

on:
  workflow_dispatch:
    inputs:
      target:
        description: 'Build Target (branch/tag/commit, e.g., master)'
        required: true
        default: "master"
      release:
        description: 'Release Target (tag, e.g., v11.0.0rc1)'
        required: true
        default: "v11.X.0"
      matrix_cuda_linux_aarch64:
        description: 'Matrix: CUDA (Linux/aarch64)'
        required: true
        #default: '["10.2-jetson", "11.5-aarch64", "11.6-aarch64"]'
        default: '["11.5-aarch64"]'
      matrix_python:
        description: 'Matrix: Python'
        required: true
        default: '["3.7", "3.8", "3.9", "3.10"]'

jobs:
  preflight:
    # Creates a source archive of cupy-release-tools and cupy repository.
    runs-on: ubuntu-latest
    steps:
    - name: Check Release Exists
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Release (or Release Draft) must exist for the given release target.
        gh release view --repo cupy/cupy "${{ github.event.inputs.release }}" || echo "TODO: tentatively ignoreing error"
    - name: Prepare Source
      run: |
        git clone https://github.com/cupy/cupy-release-tools.git
        pushd cupy-release-tools
            git checkout "${{ github.event.inputs.target }}"
            git clone --recursive https://github.com/cupy/cupy.git
            pushd cupy
                git checkout "${{ github.event.inputs.target }}"
            popd
        popd
        tar cjf source.tar.bz2 --exclude-vcs cupy-release-tools
    - name: Artifact (Source)
      uses: actions/upload-artifact@v2
      with:
        name: source
        path: source.tar.bz2

  cuda-linux-aarch64:
    # Builds on Arm64 node.
    # Note that verification is not supported as CUDA is unavailable.
    runs-on: [self-hosted, linux, arm64]
    needs: [preflight]
    strategy:
      matrix:
        cuda: ${{ fromJSON(github.event.inputs.matrix_cuda_linux_aarch64) }}
    steps:
    - name: Download Source
      uses: actions/download-artifact@v2
      with:
        name: source
    - name: Build
      run: |
        tar xf source.tar.bz2
        cd cupy-release-tools
        # Prepare builder/verifier Docker images
        #./dist.py --action build --target wheel-linux --cuda "${{ matrix.cuda }}" --python 3.10 --source cupy --dry-run
        #./dist.py --action verify --target wheel-linux --cuda "${{ matrix.cuda }}" --python 3.10 --dist /dev/null --test release-tests --dry-run

        export CUPY_RELEASE_SKIP_VERIFY=1
        echo "${{ join(fromJSON(github.event.inputs.matrix_python), ' ') }}" | xargs -n 1 -P 1 ./build.sh "${{ matrix.cuda }}"
    - name: Artifact (Wheel)
      uses: actions/upload-artifact@v2
      with:
        name: wheels
        path: cupy-release-tools/*.whl

  postflight:
    runs-on: ubuntu-latest
    needs: [cuda-linux-aarch64]
    steps:
    - name: Download Wheels
      uses: actions/download-artifact@v2
      with:
        name: wheels
    - name: Publish Wheels to GitHub Releases
      run: |
        # TODO use token with write permission to cupy/cupy
        gh release --repo cupy/cupy upload "${{ github.event.inputs.release }}" cupy-release-tools/cupy-*.whl
